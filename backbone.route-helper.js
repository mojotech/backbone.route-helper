// Generated by CoffeeScript 1.6.3
define(['backbone', 'underscore'], function(Backbone, _) {
  var addRoute, filterObject, originalRoute, pathFor, prependRoot;
  addRoute = function(name, route, options) {
    var data, numberOfParams, _base, _ref;
    if (options == null) {
      options = {};
    }
    if (_.isRegExp(route) || _.isFunction(name)) {
      return;
    }
    _.defaults(options, {
      includeRoot: true
    });
    if (this._patterns == null) {
      this._patterns = {};
    }
    data = (_base = this._patterns)[name] != null ? (_base = this._patterns)[name] : _base[name] = {};
    numberOfParams = ((_ref = route.match(/\:\w+/g)) != null ? _ref.length : void 0) || 0;
    data[numberOfParams] = route;
    if (this[name + 'Path'] != null) {
      return;
    }
    return this[name + 'Path'] = function() {
      var args, hasQueryParams, queryParams, routePattern;
      args = Array.prototype.slice.call(arguments);
      hasQueryParams = _(args[args.length - 1]).isObject();
      numberOfParams = hasQueryParams ? arguments.length - 1 : arguments.length;
      routePattern = data[numberOfParams];
      queryParams = hasQueryParams ? args.pop() : null;
      if (options.includeRoot) {
        routePattern = prependRoot(routePattern);
      }
      return pathFor(routePattern, args, queryParams);
    };
  };
  prependRoot = function(route) {
    var history, routeWithRoot, _ref;
    history = Backbone.history;
    if (((history != null ? (_ref = history.options) != null ? _ref.root : void 0 : void 0) || '/') === '/') {
      return route;
    }
    routeWithRoot = history.options.root + '/' + route;
    return routeWithRoot.replace('//', '/');
  };
  pathFor = function(pathPattern, urlParams, queryParams) {
    var filteredQueryParams, param, path, _i, _len;
    path = pathPattern;
    if (path.charAt(0) !== '/') {
      path = '/' + path;
    }
    for (_i = 0, _len = urlParams.length; _i < _len; _i++) {
      param = urlParams[_i];
      path = path.replace(/\:\w+/, param);
    }
    filteredQueryParams = filterObject(queryParams);
    if (!_.isEmpty(filteredQueryParams)) {
      path += "?" + $.param(filteredQueryParams);
    }
    return path;
  };
  filterObject = function(object) {
    var filteredObject, k, v;
    filteredObject = {};
    for (k in object) {
      v = object[k];
      if (_.has(object, k) && (v != null)) {
        filteredObject[k] = v;
      }
    }
    return filteredObject;
  };
  originalRoute = Backbone.Router.prototype.route;
  return Backbone.Router.prototype.route = function(route, name, callback) {
    originalRoute.call(this, route, name, callback);
    return addRoute.call(this, name, route);
  };
});
